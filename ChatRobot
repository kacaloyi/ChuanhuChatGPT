{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "private_outputs": true,
      "toc_visible": true,
      "mount_file_id": "1MvLxt7uowb9Ylx4kpYM8iH-WeOQNYtYv",
      "authorship_tag": "ABX9TyMkxC/Nriknow6yGkjkrnsk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kacaloyi/ChuanhuChatGPT/blob/main/ChatRobot\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 尝试安装WebUI\n",
        "\n",
        "**因为离开后所有文件都会消失，所以要保证安装在云盘中。**\n",
        "\n",
        "先用gitclone把上面它弄下来。地址：https://github.com/AUTOMATIC1111/stable-diffusion-webui"
      ],
      "metadata": {
        "id": "WDoyEqAPCVT5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!cd ~\n",
        "!pwd\n",
        "!ls -l\n",
        "\n",
        "!git --version"
      ],
      "metadata": {
        "id": "37979ofDCcej"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bPhoI_DR-4iA"
      },
      "outputs": [],
      "source": [
        "#现在可以尝试ChatGPT\n",
        "\n",
        "import json\n",
        "import gradio as gr\n",
        "import openai\n",
        "import os\n",
        "import sys\n",
        "import traceback\n",
        "\n",
        "\n",
        "# import markdown\n",
        "\n",
        "my_api_key = \"sk-xxxxxxx\"    # 在这里输入你的 API 密钥\n",
        "initial_prompt = \"You are a helpful assistant.\"\n",
        "\n",
        "if my_api_key == \"\":\n",
        "    my_api_key = os.environ.get('my_api_key')\n",
        "\n",
        "if my_api_key == \"empty\":\n",
        "    print(\"Please give a api key!\")\n",
        "    sys.exit(1)\n",
        "\n",
        "initial_keytxt = \"\"\n",
        "'''\n",
        "if my_api_key == \"\":\n",
        "    initial_keytxt = None\n",
        "elif len(str(my_api_key)) == 51:\n",
        "    initial_keytxt = \"默认api-key（未验证）：\" + str(my_api_key[:4] + \"...\" + my_api_key[-4:])\n",
        "else:\n",
        "    initial_keytxt = \"默认api-key无效，请重新输入\"\n",
        "'''\n",
        "\n",
        "def parse_text(text):\n",
        "    lines = text.split(\"\\n\")\n",
        "    for i,line in enumerate(lines):\n",
        "        if \"```\" in line:\n",
        "            items = line.split('`')\n",
        "            if items[-1]:\n",
        "                lines[i] = f'<pre><code class=\"{items[-1]}\">'\n",
        "            else:\n",
        "                lines[i] = f'</code></pre>'\n",
        "        else:\n",
        "            if i>0:\n",
        "                line = line.replace(\"<\", \"&lt;\")\n",
        "                line = line.replace(\">\", \"&gt;\")\n",
        "                lines[i] = '<br/>'+line.replace(\" \", \"&nbsp;\")\n",
        "    return \"\".join(lines)\n",
        "\n",
        "def get_response(system, context, myKey, raw = False):\n",
        "    global  initial_keytxt\n",
        "    openai.api_key = myKey\n",
        "    response = openai.ChatCompletion.create(\n",
        "        model=\"gpt-3.5-turbo\",\n",
        "        messages=[system, *context],\n",
        "    )\n",
        "    openai.api_key = \"\"\n",
        "    if raw:\n",
        "        return response\n",
        "    else:\n",
        "        statistics = f'本次对话Tokens用量【{response[\"usage\"][\"total_tokens\"]} / 4096】 （ 提问+上文 {response[\"usage\"][\"prompt_tokens\"]}，回答 {response[\"usage\"][\"completion_tokens\"]} ）'\n",
        "        message = response[\"choices\"][0][\"message\"][\"content\"]\n",
        "\n",
        "        initial_keytxt = statistics\n",
        "\n",
        "\n",
        "        message_with_stats = f'{message}'\n",
        "        #\\n\\n================\\n\\n{statistics}'\n",
        "        # message_with_stats = markdown.markdown(message_with_stats)\n",
        "\n",
        "        return message, parse_text(message_with_stats),statistics\n",
        "\n",
        "def predict(chatbot, input_sentence, system, context, myKey):\n",
        "    if len(input_sentence) == 0:\n",
        "        return []\n",
        "    context.append({\"role\": \"user\", \"content\": f\"{input_sentence}\"})\n",
        "\n",
        "    try:\n",
        "        message, message_with_stats = get_response(system, context, myKey)\n",
        "    except openai.error.AuthenticationError:\n",
        "        chatbot.append((input_sentence, \"请求失败，请检查API-key是否正确。\"))\n",
        "        return chatbot, context\n",
        "    except openai.error.Timeout:\n",
        "        chatbot.append((input_sentence, \"请求超时，请检查网络连接。\"))\n",
        "        return chatbot, context\n",
        "    except openai.error.APIConnectionError:\n",
        "        chatbot.append((input_sentence, \"连接失败，请检查网络连接。\"))\n",
        "        return chatbot, context\n",
        "    except openai.error.RateLimitError:\n",
        "        chatbot.append((input_sentence, \"请求过于频繁，请5s后再试。\"))\n",
        "        return chatbot, context\n",
        "    except:\n",
        "        chatbot.append((input_sentence, \"predict发生了未知错误Orz\"))\n",
        "        return chatbot, context\n",
        "\n",
        "    context.append({\"role\": \"assistant\", \"content\": message})\n",
        "\n",
        "    chatbot.append((input_sentence, message_with_stats))\n",
        "\n",
        "\n",
        "    return chatbot, context\n",
        "\n",
        "def retry(chatbot, system, context, myKey):\n",
        "    if len(context) == 0:\n",
        "        return [], []\n",
        "    \n",
        "    try:\n",
        "        message, message_with_stats = get_response(system, context[:-1], myKey)\n",
        "    except openai.error.AuthenticationError:\n",
        "        chatbot.append((\"重试请求\", \"请求失败，请检查API-key是否正确。\"))\n",
        "        return chatbot, context\n",
        "    except openai.error.Timeout:\n",
        "        chatbot.append((\"重试请求\", \"请求超时，请检查网络连接。\"))\n",
        "        return chatbot, context\n",
        "    except openai.error.APIConnectionError:\n",
        "        chatbot.append((\"重试请求\", \"连接失败，请检查网络连接。\"))\n",
        "        return chatbot, context\n",
        "    except openai.error.RateLimitError:\n",
        "        chatbot.append((\"重试请求\", \"请求过于频繁，请5s后再试。\"))\n",
        "        return chatbot, context\n",
        "    except:\n",
        "        chatbot.append((\"重试请求\", \"retry发生了未知错误Orz\"))\n",
        "        return chatbot, context\n",
        "    \n",
        "    context[-1] = {\"role\": \"assistant\", \"content\": message}\n",
        "\n",
        "    chatbot[-1] = (context[-2][\"content\"], message_with_stats)\n",
        "    return chatbot, context\n",
        "\n",
        "def delete_last_conversation(chatbot, context):\n",
        "    if len(context) == 0:\n",
        "        return [], []\n",
        "    chatbot = chatbot[:-1]\n",
        "    context = context[:-2]\n",
        "    return chatbot, context\n",
        "\n",
        "def reduce_token(chatbot, system, context, myKey):\n",
        "    context.append({\"role\": \"user\", \"content\": \"请帮我总结一下上述对话的内容，实现减少tokens的同时，保证对话的质量。在总结中不要加入这一句话。\"})\n",
        "\n",
        "    response = get_response(system, context, myKey, raw=True)\n",
        "\n",
        "    statistics = f'本次对话Tokens用量【{response[\"usage\"][\"completion_tokens\"]+12+12+8} / 4096】'\n",
        "    optmz_str = parse_text( f'好的，我们之前聊了:{response[\"choices\"][0][\"message\"][\"content\"]}\\n\\n================\\n\\n{statistics}' )\n",
        "    chatbot.append((\"请帮我总结一下上述对话的内容，实现减少tokens的同时，保证对话的质量。\", optmz_str))\n",
        "\n",
        "    context = []\n",
        "    context.append({\"role\": \"user\", \"content\": \"我们之前聊了什么?\"})\n",
        "    context.append({\"role\": \"assistant\", \"content\": f'我们之前聊了：{response[\"choices\"][0][\"message\"][\"content\"]}'})\n",
        "    return chatbot, context\n",
        "\n",
        "def save_chat_history(filepath, system, context):\n",
        "    if filepath == \"\":\n",
        "        return\n",
        "    history = {\"system\": system, \"context\": context}\n",
        "    with open(f\"{filepath}.json\", \"w\") as f:\n",
        "        json.dump(history, f)\n",
        "\n",
        "def load_chat_history(fileobj):\n",
        "    with open(fileobj.name, \"r\") as f:\n",
        "        history = json.load(f)\n",
        "    context = history[\"context\"]\n",
        "    chathistory = []\n",
        "    for i in range(0, len(context), 2):\n",
        "        chathistory.append((parse_text(context[i][\"content\"]), parse_text(context[i+1][\"content\"])))\n",
        "    return chathistory , history[\"system\"], context, history[\"system\"][\"content\"]\n",
        "\n",
        "def get_history_names():\n",
        "    with open(\"history.json\", \"r\") as f:\n",
        "        history = json.load(f)\n",
        "    return list(history.keys())\n",
        "\n",
        "\n",
        "def reset_state():\n",
        "    return [], []\n",
        "\n",
        "def update_system(new_system_prompt):\n",
        "    return {\"role\": \"system\", \"content\": new_system_prompt}\n",
        "\n",
        "def set_apikey(new_api_key, myKey):\n",
        "    old_api_key = myKey\n",
        "    \n",
        "    try:\n",
        "        get_response(update_system(initial_prompt), [{\"role\": \"user\", \"content\": \"test\"}], new_api_key)\n",
        "    except openai.error.AuthenticationError:\n",
        "        return \"无效的api-key\", myKey\n",
        "    except openai.error.Timeout:\n",
        "        return \"请求超时，请检查网络设置\", myKey\n",
        "    except openai.error.APIConnectionError:\n",
        "        return \"网络错误\", myKey\n",
        "    except:\n",
        "        return \"set_apikey发生了未知错误Orz\", myKey\n",
        "    \n",
        "    encryption_str = \"验证成功，api-key已做遮挡处理：\" + new_api_key[:4] + \"...\" + new_api_key[-4:]\n",
        "    return encryption_str, new_api_key\n",
        "\n",
        "\n",
        "with gr.Blocks() as demo:\n",
        "    chatbot = gr.Chatbot().style(color_map=(\"#1D51EE\", \"#585A5B\"))\n",
        "    \n",
        "    context = gr.State([])\n",
        "   \n",
        "    systemPrompt = gr.State(update_system(initial_prompt))\n",
        "    myKey = gr.State(my_api_key)\n",
        "    topic = gr.State(\"未命名对话历史记录\")\n",
        "\n",
        "    with gr.Row():\n",
        "        with gr.Column(scale=12):\n",
        "            txt = gr.Textbox(show_label=False, placeholder=\"在这里提问\").style(container=False)\n",
        "        with gr.Column(min_width=50, scale=1):\n",
        "            submitBtn = gr.Button(\"🚀\", variant=\"primary\")\n",
        "    with gr.Row():\n",
        "        emptyBtn = gr.Button(\"🧹 新的对话\")\n",
        "        retryBtn = gr.Button(\"🔄 重新生成\")\n",
        "        delLastBtn = gr.Button(\"🗑️ 删除上条对话\")\n",
        "        reduceTokenBtn = gr.Button(\"♻️ 优化Tokens\")\n",
        "\n",
        "    keyTxt = gr.Textbox(show_label=True, placeholder=f\"\", value=initial_keytxt,interactive=False, label=\"简报\").style(container=True)\n",
        "    newSystemPrompt = gr.Textbox(show_label=True, placeholder=f\"在这里修改System Prompt...\", label=\"修改System prompt（改变ChatGPT的角色）\").style(container=True)\n",
        "    systemPromptDisplay = gr.Textbox(show_label=True, value=initial_prompt, interactive=False, label=\"目前的 System prompt\").style(container=True)\n",
        "    with gr.Accordion(label=\"保存/加载对话历史记录(在文本框中输入文件名，点击“保存对话”按钮，历史记录文件会被存储到本地)\", open=False):\n",
        "        with gr.Column():\n",
        "            with gr.Row():\n",
        "                with gr.Column(scale=6):\n",
        "                    saveFileName = gr.Textbox(show_label=True, placeholder=f\"在这里输入保存的文件名...\", label=\"保存对话\", value=\"对话历史记录\").style(container=True)\n",
        "                with gr.Column(scale=1):\n",
        "                    saveBtn = gr.Button(\"💾 保存对话\")\n",
        "                    uploadBtn = gr.UploadButton(\"📂 读取对话\", file_count=\"single\", file_types=[\"json\"])\n",
        "\n",
        "    txt.submit(predict, [chatbot, txt, systemPrompt, context, myKey], [chatbot, context], show_progress=True)\n",
        "    txt.submit(lambda :\"\", None, txt)\n",
        "    submitBtn.click(predict, [chatbot, txt, systemPrompt, context, myKey], [chatbot, context], show_progress=True)\n",
        "    submitBtn.click(lambda :\"\", None, txt)\n",
        "    emptyBtn.click(reset_state, outputs=[chatbot, context])\n",
        "    newSystemPrompt.submit(update_system, newSystemPrompt, systemPrompt)\n",
        "    newSystemPrompt.submit(lambda x: x, newSystemPrompt, systemPromptDisplay)\n",
        "    newSystemPrompt.submit(lambda :\"\", None, newSystemPrompt)\n",
        "    retryBtn.click(retry, [chatbot, systemPrompt, context, myKey], [chatbot, context], show_progress=True)\n",
        "    delLastBtn.click(delete_last_conversation, [chatbot, context], [chatbot, context], show_progress=True)\n",
        "    reduceTokenBtn.click(reduce_token, [chatbot, systemPrompt, context, myKey], [chatbot, context], show_progress=True)\n",
        "    #keyTxt.submit(set_apikey, [keyTxt, myKey], [keyTxt, myKey], show_progress=True)\n",
        "    uploadBtn.upload(load_chat_history, uploadBtn, [chatbot, systemPrompt, context, systemPromptDisplay], show_progress=True)\n",
        "    saveBtn.click(save_chat_history, [saveFileName, systemPrompt, context], None, show_progress=True)\n",
        "\n",
        "\n",
        "demo.launch(inline = True)\n",
        "#interface.launch(inline=True)\n",
        "#demo.launch(server_name=\"127.0.0.1\", server_port=8808)\n",
        "#也可以尝试在launch函数中设置参数share=True，这时会得到一个公共网址，\n",
        "#诸如http://xxxx.gradio.app，我们就可以把自己搭建的以图搜图服务分享给小伙伴啦。\n",
        "\n"
      ]
    }
  ]
}
